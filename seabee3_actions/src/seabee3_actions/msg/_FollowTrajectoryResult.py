"""autogenerated by genmsg_py from FollowTrajectoryResult.msg. Do not edit."""
import roslib.message
import struct

import seabee3_msgs.msg
import geometry_msgs.msg

class FollowTrajectoryResult(roslib.message.Message):
  _md5sum = "e0eda7c1388486888116a9e25b649a01"
  _type = "seabee3_actions/FollowTrajectoryResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result

# the ending state
seabee3_msgs/TrajectoryWaypoint final_waypoint

================================================================================
MSG: seabee3_msgs/TrajectoryWaypoint
# pose
geometry_msgs/PoseWithCovariance pose

# velocity
geometry_msgs/TwistWithCovariance velocity

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertianty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['final_waypoint']
  _slot_types = ['seabee3_msgs/TrajectoryWaypoint']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       final_waypoint
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FollowTrajectoryResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.final_waypoint is None:
        self.final_waypoint = seabee3_msgs.msg.TrajectoryWaypoint()
    else:
      self.final_waypoint = seabee3_msgs.msg.TrajectoryWaypoint()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.final_waypoint.pose.pose.position.x, _x.final_waypoint.pose.pose.position.y, _x.final_waypoint.pose.pose.position.z, _x.final_waypoint.pose.pose.orientation.x, _x.final_waypoint.pose.pose.orientation.y, _x.final_waypoint.pose.pose.orientation.z, _x.final_waypoint.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.final_waypoint.pose.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.final_waypoint.velocity.twist.linear.x, _x.final_waypoint.velocity.twist.linear.y, _x.final_waypoint.velocity.twist.linear.z, _x.final_waypoint.velocity.twist.angular.x, _x.final_waypoint.velocity.twist.angular.y, _x.final_waypoint.velocity.twist.angular.z))
      buff.write(_struct_36d.pack(*self.final_waypoint.velocity.covariance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.final_waypoint is None:
        self.final_waypoint = seabee3_msgs.msg.TrajectoryWaypoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.final_waypoint.pose.pose.position.x, _x.final_waypoint.pose.pose.position.y, _x.final_waypoint.pose.pose.position.z, _x.final_waypoint.pose.pose.orientation.x, _x.final_waypoint.pose.pose.orientation.y, _x.final_waypoint.pose.pose.orientation.z, _x.final_waypoint.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.final_waypoint.pose.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.final_waypoint.velocity.twist.linear.x, _x.final_waypoint.velocity.twist.linear.y, _x.final_waypoint.velocity.twist.linear.z, _x.final_waypoint.velocity.twist.angular.x, _x.final_waypoint.velocity.twist.angular.y, _x.final_waypoint.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.final_waypoint.velocity.covariance = _struct_36d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_7d.pack(_x.final_waypoint.pose.pose.position.x, _x.final_waypoint.pose.pose.position.y, _x.final_waypoint.pose.pose.position.z, _x.final_waypoint.pose.pose.orientation.x, _x.final_waypoint.pose.pose.orientation.y, _x.final_waypoint.pose.pose.orientation.z, _x.final_waypoint.pose.pose.orientation.w))
      buff.write(self.final_waypoint.pose.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.final_waypoint.velocity.twist.linear.x, _x.final_waypoint.velocity.twist.linear.y, _x.final_waypoint.velocity.twist.linear.z, _x.final_waypoint.velocity.twist.angular.x, _x.final_waypoint.velocity.twist.angular.y, _x.final_waypoint.velocity.twist.angular.z))
      buff.write(self.final_waypoint.velocity.covariance.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.final_waypoint is None:
        self.final_waypoint = seabee3_msgs.msg.TrajectoryWaypoint()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.final_waypoint.pose.pose.position.x, _x.final_waypoint.pose.pose.position.y, _x.final_waypoint.pose.pose.position.z, _x.final_waypoint.pose.pose.orientation.x, _x.final_waypoint.pose.pose.orientation.y, _x.final_waypoint.pose.pose.orientation.z, _x.final_waypoint.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.final_waypoint.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.final_waypoint.velocity.twist.linear.x, _x.final_waypoint.velocity.twist.linear.y, _x.final_waypoint.velocity.twist.linear.z, _x.final_waypoint.velocity.twist.angular.x, _x.final_waypoint.velocity.twist.angular.y, _x.final_waypoint.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.final_waypoint.velocity.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_36d = struct.Struct("<36d")
_struct_7d = struct.Struct("<7d")
_struct_6d = struct.Struct("<6d")
