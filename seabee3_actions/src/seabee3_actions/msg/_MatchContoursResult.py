"""autogenerated by genmsg_py from MatchContoursResult.msg. Do not edit."""
import roslib.message
import struct

import seabee3_msgs.msg

class MatchContoursResult(roslib.message.Message):
  _md5sum = "3345bf45e8443d0e9eb6561971f2aaef"
  _type = "seabee3_actions/MatchContoursResult"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# result
# there will be MatchQualityArray for each candidate contour containing a MatchQuality against each template contour
seabee3_msgs/MatchQualityArray[] matches

================================================================================
MSG: seabee3_msgs/MatchQualityArray
string candidate_id
MatchQuality[] match_qualites

================================================================================
MSG: seabee3_msgs/MatchQuality
string template_id
float64 match_quality

"""
  __slots__ = ['matches']
  _slot_types = ['seabee3_msgs/MatchQualityArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       matches
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(MatchContoursResult, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.matches is None:
        self.matches = []
    else:
      self.matches = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      length = len(self.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.matches:
        _x = val1.candidate_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.match_qualites)
        buff.write(_struct_I.pack(length))
        for val2 in val1.match_qualites:
          _x = val2.template_id
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.match_quality))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.matches = []
      for i in range(0, length):
        val1 = seabee3_msgs.msg.MatchQualityArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.candidate_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.match_qualites = []
        for i in range(0, length):
          val2 = seabee3_msgs.msg.MatchQuality()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.template_id = str[start:end]
          start = end
          end += 8
          (val2.match_quality,) = _struct_d.unpack(str[start:end])
          val1.match_qualites.append(val2)
        self.matches.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      length = len(self.matches)
      buff.write(_struct_I.pack(length))
      for val1 in self.matches:
        _x = val1.candidate_id
        length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        length = len(val1.match_qualites)
        buff.write(_struct_I.pack(length))
        for val2 in val1.match_qualites:
          _x = val2.template_id
          length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
          buff.write(_struct_d.pack(val2.match_quality))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.matches = []
      for i in range(0, length):
        val1 = seabee3_msgs.msg.MatchQualityArray()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1.candidate_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.match_qualites = []
        for i in range(0, length):
          val2 = seabee3_msgs.msg.MatchQuality()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          val2.template_id = str[start:end]
          start = end
          end += 8
          (val2.match_quality,) = _struct_d.unpack(str[start:end])
          val1.match_qualites.append(val2)
        self.matches.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_d = struct.Struct("<d")
