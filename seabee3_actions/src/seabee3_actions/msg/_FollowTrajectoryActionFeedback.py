"""autogenerated by genmsg_py from FollowTrajectoryActionFeedback.msg. Do not edit."""
import roslib.message
import struct

import roslib.rostime
import actionlib_msgs.msg
import geometry_msgs.msg
import seabee3_msgs.msg
import seabee3_actions.msg
import std_msgs.msg

class FollowTrajectoryActionFeedback(roslib.message.Message):
  _md5sum = "39980dccfcf906afa3d2e77fcb9c2f06"
  _type = "seabee3_actions/FollowTrajectoryActionFeedback"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
FollowTrajectoryFeedback feedback

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: seabee3_actions/FollowTrajectoryFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback

# the interval we're trying to achieve
seabee3_msgs/TrajectoryInterval target_interval

# where we thought we'd be at this point in the interval
seabee3_msgs/TrajectoryWaypoint expected_state

# where we actually are
seabee3_msgs/TrajectoryWaypoint current_state


================================================================================
MSG: seabee3_msgs/TrajectoryInterval
duration length
seabee3_msgs/TrajectoryWaypoint initial_state
geometry_msgs/TwistWithCovariance acceleration

================================================================================
MSG: seabee3_msgs/TrajectoryWaypoint
# pose
geometry_msgs/PoseWithCovariance pose

# velocity
geometry_msgs/TwistWithCovariance velocity

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TwistWithCovariance
# This expresses velocity in free space with uncertianty.

Twist twist

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','status','feedback']
  _slot_types = ['Header','actionlib_msgs/GoalStatus','seabee3_actions/FollowTrajectoryFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       header,status,feedback
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(FollowTrajectoryActionFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = seabee3_actions.msg.FollowTrajectoryFeedback()
    else:
      self.header = std_msgs.msg._Header.Header()
      self.status = actionlib_msgs.msg.GoalStatus()
      self.feedback = seabee3_actions.msg.FollowTrajectoryFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i7d.pack(_x.feedback.target_interval.length.secs, _x.feedback.target_interval.length.nsecs, _x.feedback.target_interval.initial_state.pose.pose.position.x, _x.feedback.target_interval.initial_state.pose.pose.position.y, _x.feedback.target_interval.initial_state.pose.pose.position.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.x, _x.feedback.target_interval.initial_state.pose.pose.orientation.y, _x.feedback.target_interval.initial_state.pose.pose.orientation.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.feedback.target_interval.initial_state.pose.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.target_interval.initial_state.velocity.twist.linear.x, _x.feedback.target_interval.initial_state.velocity.twist.linear.y, _x.feedback.target_interval.initial_state.velocity.twist.linear.z, _x.feedback.target_interval.initial_state.velocity.twist.angular.x, _x.feedback.target_interval.initial_state.velocity.twist.angular.y, _x.feedback.target_interval.initial_state.velocity.twist.angular.z))
      buff.write(_struct_36d.pack(*self.feedback.target_interval.initial_state.velocity.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.target_interval.acceleration.twist.linear.x, _x.feedback.target_interval.acceleration.twist.linear.y, _x.feedback.target_interval.acceleration.twist.linear.z, _x.feedback.target_interval.acceleration.twist.angular.x, _x.feedback.target_interval.acceleration.twist.angular.y, _x.feedback.target_interval.acceleration.twist.angular.z))
      buff.write(_struct_36d.pack(*self.feedback.target_interval.acceleration.covariance))
      _x = self
      buff.write(_struct_7d.pack(_x.feedback.expected_state.pose.pose.position.x, _x.feedback.expected_state.pose.pose.position.y, _x.feedback.expected_state.pose.pose.position.z, _x.feedback.expected_state.pose.pose.orientation.x, _x.feedback.expected_state.pose.pose.orientation.y, _x.feedback.expected_state.pose.pose.orientation.z, _x.feedback.expected_state.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.feedback.expected_state.pose.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.expected_state.velocity.twist.linear.x, _x.feedback.expected_state.velocity.twist.linear.y, _x.feedback.expected_state.velocity.twist.linear.z, _x.feedback.expected_state.velocity.twist.angular.x, _x.feedback.expected_state.velocity.twist.angular.y, _x.feedback.expected_state.velocity.twist.angular.z))
      buff.write(_struct_36d.pack(*self.feedback.expected_state.velocity.covariance))
      _x = self
      buff.write(_struct_7d.pack(_x.feedback.current_state.pose.pose.position.x, _x.feedback.current_state.pose.pose.position.y, _x.feedback.current_state.pose.pose.position.z, _x.feedback.current_state.pose.pose.orientation.x, _x.feedback.current_state.pose.pose.orientation.y, _x.feedback.current_state.pose.pose.orientation.z, _x.feedback.current_state.pose.pose.orientation.w))
      buff.write(_struct_36d.pack(*self.feedback.current_state.pose.covariance))
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.current_state.velocity.twist.linear.x, _x.feedback.current_state.velocity.twist.linear.y, _x.feedback.current_state.velocity.twist.linear.z, _x.feedback.current_state.velocity.twist.angular.x, _x.feedback.current_state.velocity.twist.angular.y, _x.feedback.current_state.velocity.twist.angular.z))
      buff.write(_struct_36d.pack(*self.feedback.current_state.velocity.covariance))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = seabee3_actions.msg.FollowTrajectoryFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status.text = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.feedback.target_interval.length.secs, _x.feedback.target_interval.length.nsecs, _x.feedback.target_interval.initial_state.pose.pose.position.x, _x.feedback.target_interval.initial_state.pose.pose.position.y, _x.feedback.target_interval.initial_state.pose.pose.position.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.x, _x.feedback.target_interval.initial_state.pose.pose.orientation.y, _x.feedback.target_interval.initial_state.pose.pose.orientation.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.w,) = _struct_2i7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.initial_state.pose.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.feedback.target_interval.initial_state.velocity.twist.linear.x, _x.feedback.target_interval.initial_state.velocity.twist.linear.y, _x.feedback.target_interval.initial_state.velocity.twist.linear.z, _x.feedback.target_interval.initial_state.velocity.twist.angular.x, _x.feedback.target_interval.initial_state.velocity.twist.angular.y, _x.feedback.target_interval.initial_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.initial_state.velocity.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.feedback.target_interval.acceleration.twist.linear.x, _x.feedback.target_interval.acceleration.twist.linear.y, _x.feedback.target_interval.acceleration.twist.linear.z, _x.feedback.target_interval.acceleration.twist.angular.x, _x.feedback.target_interval.acceleration.twist.angular.y, _x.feedback.target_interval.acceleration.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.acceleration.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.feedback.expected_state.pose.pose.position.x, _x.feedback.expected_state.pose.pose.position.y, _x.feedback.expected_state.pose.pose.position.z, _x.feedback.expected_state.pose.pose.orientation.x, _x.feedback.expected_state.pose.pose.orientation.y, _x.feedback.expected_state.pose.pose.orientation.z, _x.feedback.expected_state.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.expected_state.pose.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.feedback.expected_state.velocity.twist.linear.x, _x.feedback.expected_state.velocity.twist.linear.y, _x.feedback.expected_state.velocity.twist.linear.z, _x.feedback.expected_state.velocity.twist.angular.x, _x.feedback.expected_state.velocity.twist.angular.y, _x.feedback.expected_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.expected_state.velocity.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.feedback.current_state.pose.pose.position.x, _x.feedback.current_state.pose.pose.position.y, _x.feedback.current_state.pose.pose.position.z, _x.feedback.current_state.pose.pose.orientation.x, _x.feedback.current_state.pose.pose.orientation.y, _x.feedback.current_state.pose.pose.orientation.z, _x.feedback.current_state.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.current_state.pose.covariance = _struct_36d.unpack(str[start:end])
      _x = self
      start = end
      end += 48
      (_x.feedback.current_state.velocity.twist.linear.x, _x.feedback.current_state.velocity.twist.linear.y, _x.feedback.current_state.velocity.twist.linear.z, _x.feedback.current_state.velocity.twist.angular.x, _x.feedback.current_state.velocity.twist.angular.y, _x.feedback.current_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.current_state.velocity.covariance = _struct_36d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs))
      _x = self.status.goal_id.id
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.status.status))
      _x = self.status.text
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2i7d.pack(_x.feedback.target_interval.length.secs, _x.feedback.target_interval.length.nsecs, _x.feedback.target_interval.initial_state.pose.pose.position.x, _x.feedback.target_interval.initial_state.pose.pose.position.y, _x.feedback.target_interval.initial_state.pose.pose.position.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.x, _x.feedback.target_interval.initial_state.pose.pose.orientation.y, _x.feedback.target_interval.initial_state.pose.pose.orientation.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.w))
      buff.write(self.feedback.target_interval.initial_state.pose.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.target_interval.initial_state.velocity.twist.linear.x, _x.feedback.target_interval.initial_state.velocity.twist.linear.y, _x.feedback.target_interval.initial_state.velocity.twist.linear.z, _x.feedback.target_interval.initial_state.velocity.twist.angular.x, _x.feedback.target_interval.initial_state.velocity.twist.angular.y, _x.feedback.target_interval.initial_state.velocity.twist.angular.z))
      buff.write(self.feedback.target_interval.initial_state.velocity.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.target_interval.acceleration.twist.linear.x, _x.feedback.target_interval.acceleration.twist.linear.y, _x.feedback.target_interval.acceleration.twist.linear.z, _x.feedback.target_interval.acceleration.twist.angular.x, _x.feedback.target_interval.acceleration.twist.angular.y, _x.feedback.target_interval.acceleration.twist.angular.z))
      buff.write(self.feedback.target_interval.acceleration.covariance.tostring())
      _x = self
      buff.write(_struct_7d.pack(_x.feedback.expected_state.pose.pose.position.x, _x.feedback.expected_state.pose.pose.position.y, _x.feedback.expected_state.pose.pose.position.z, _x.feedback.expected_state.pose.pose.orientation.x, _x.feedback.expected_state.pose.pose.orientation.y, _x.feedback.expected_state.pose.pose.orientation.z, _x.feedback.expected_state.pose.pose.orientation.w))
      buff.write(self.feedback.expected_state.pose.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.expected_state.velocity.twist.linear.x, _x.feedback.expected_state.velocity.twist.linear.y, _x.feedback.expected_state.velocity.twist.linear.z, _x.feedback.expected_state.velocity.twist.angular.x, _x.feedback.expected_state.velocity.twist.angular.y, _x.feedback.expected_state.velocity.twist.angular.z))
      buff.write(self.feedback.expected_state.velocity.covariance.tostring())
      _x = self
      buff.write(_struct_7d.pack(_x.feedback.current_state.pose.pose.position.x, _x.feedback.current_state.pose.pose.position.y, _x.feedback.current_state.pose.pose.position.z, _x.feedback.current_state.pose.pose.orientation.x, _x.feedback.current_state.pose.pose.orientation.y, _x.feedback.current_state.pose.pose.orientation.z, _x.feedback.current_state.pose.pose.orientation.w))
      buff.write(self.feedback.current_state.pose.covariance.tostring())
      _x = self
      buff.write(_struct_6d.pack(_x.feedback.current_state.velocity.twist.linear.x, _x.feedback.current_state.velocity.twist.linear.y, _x.feedback.current_state.velocity.twist.linear.z, _x.feedback.current_state.velocity.twist.angular.x, _x.feedback.current_state.velocity.twist.angular.y, _x.feedback.current_state.velocity.twist.angular.z))
      buff.write(self.feedback.current_state.velocity.covariance.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg._Header.Header()
      if self.status is None:
        self.status = actionlib_msgs.msg.GoalStatus()
      if self.feedback is None:
        self.feedback = seabee3_actions.msg.FollowTrajectoryFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.status.goal_id.stamp.secs, _x.status.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.status.status,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.status.text = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.feedback.target_interval.length.secs, _x.feedback.target_interval.length.nsecs, _x.feedback.target_interval.initial_state.pose.pose.position.x, _x.feedback.target_interval.initial_state.pose.pose.position.y, _x.feedback.target_interval.initial_state.pose.pose.position.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.x, _x.feedback.target_interval.initial_state.pose.pose.orientation.y, _x.feedback.target_interval.initial_state.pose.pose.orientation.z, _x.feedback.target_interval.initial_state.pose.pose.orientation.w,) = _struct_2i7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.initial_state.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.feedback.target_interval.initial_state.velocity.twist.linear.x, _x.feedback.target_interval.initial_state.velocity.twist.linear.y, _x.feedback.target_interval.initial_state.velocity.twist.linear.z, _x.feedback.target_interval.initial_state.velocity.twist.angular.x, _x.feedback.target_interval.initial_state.velocity.twist.angular.y, _x.feedback.target_interval.initial_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.initial_state.velocity.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.feedback.target_interval.acceleration.twist.linear.x, _x.feedback.target_interval.acceleration.twist.linear.y, _x.feedback.target_interval.acceleration.twist.linear.z, _x.feedback.target_interval.acceleration.twist.angular.x, _x.feedback.target_interval.acceleration.twist.angular.y, _x.feedback.target_interval.acceleration.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.target_interval.acceleration.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 56
      (_x.feedback.expected_state.pose.pose.position.x, _x.feedback.expected_state.pose.pose.position.y, _x.feedback.expected_state.pose.pose.position.z, _x.feedback.expected_state.pose.pose.orientation.x, _x.feedback.expected_state.pose.pose.orientation.y, _x.feedback.expected_state.pose.pose.orientation.z, _x.feedback.expected_state.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.expected_state.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.feedback.expected_state.velocity.twist.linear.x, _x.feedback.expected_state.velocity.twist.linear.y, _x.feedback.expected_state.velocity.twist.linear.z, _x.feedback.expected_state.velocity.twist.angular.x, _x.feedback.expected_state.velocity.twist.angular.y, _x.feedback.expected_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.expected_state.velocity.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 56
      (_x.feedback.current_state.pose.pose.position.x, _x.feedback.current_state.pose.pose.position.y, _x.feedback.current_state.pose.pose.position.z, _x.feedback.current_state.pose.pose.orientation.x, _x.feedback.current_state.pose.pose.orientation.y, _x.feedback.current_state.pose.pose.orientation.z, _x.feedback.current_state.pose.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.current_state.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 48
      (_x.feedback.current_state.velocity.twist.linear.x, _x.feedback.current_state.velocity.twist.linear.y, _x.feedback.current_state.velocity.twist.linear.z, _x.feedback.current_state.velocity.twist.angular.x, _x.feedback.current_state.velocity.twist.angular.y, _x.feedback.current_state.velocity.twist.angular.z,) = _struct_6d.unpack(str[start:end])
      start = end
      end += 288
      self.feedback.current_state.velocity.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
_struct_6d = struct.Struct("<6d")
_struct_36d = struct.Struct("<36d")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_2I = struct.Struct("<2I")
_struct_2i7d = struct.Struct("<2i7d")
