"""autogenerated by genmsg_py from CalibrateRPYRequest.msg. Do not edit."""
import roslib.message
import struct


class CalibrateRPYRequest(roslib.message.Message):
  _md5sum = "b8c76a715d51952bb5599b68772e1e1c"
  _type = "seabee3_msgs/CalibrateRPYRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 num_samples

"""
  __slots__ = ['num_samples']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       num_samples
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CalibrateRPYRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.num_samples is None:
        self.num_samples = 0
    else:
      self.num_samples = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_i.pack(self.num_samples))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (self.num_samples,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_i.pack(self.num_samples))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.num_samples,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_i = struct.Struct("<i")
"""autogenerated by genmsg_py from CalibrateRPYResponse.msg. Do not edit."""
import roslib.message
import struct

import geometry_msgs.msg

class CalibrateRPYResponse(roslib.message.Message):
  _md5sum = "e0bc765de22fc4cd0d4cbb53fa5680b9"
  _type = "seabee3_msgs/CalibrateRPYResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Vector3 calibration


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['calibration']
  _slot_types = ['geometry_msgs/Vector3']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       calibration
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(CalibrateRPYResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.calibration is None:
        self.calibration = geometry_msgs.msg.Vector3()
    else:
      self.calibration = geometry_msgs.msg.Vector3()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.calibration.x, _x.calibration.y, _x.calibration.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      if self.calibration is None:
        self.calibration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.calibration.x, _x.calibration.y, _x.calibration.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_3d.pack(_x.calibration.x, _x.calibration.y, _x.calibration.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      if self.calibration is None:
        self.calibration = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.calibration.x, _x.calibration.y, _x.calibration.z,) = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_3d = struct.Struct("<3d")
class CalibrateRPY(roslib.message.ServiceDefinition):
  _type          = 'seabee3_msgs/CalibrateRPY'
  _md5sum = '94bbcdb42927611c3d162e4b7f55d05f'
  _request_class  = CalibrateRPYRequest
  _response_class = CalibrateRPYResponse
