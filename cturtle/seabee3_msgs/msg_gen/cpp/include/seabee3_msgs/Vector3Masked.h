/* Auto-generated by genmsg_cpp for file /home/edward/workspace/seabee3-ros-pkg/seabee3_msgs/msg/Vector3Masked.msg */
#ifndef SEABEE3_MSGS_MESSAGE_VECTOR3MASKED_H
#define SEABEE3_MSGS_MESSAGE_VECTOR3MASKED_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace seabee3_msgs
{
template <class ContainerAllocator>
struct Vector3Masked_ : public ros::Message
{
  typedef Vector3Masked_<ContainerAllocator> Type;

  Vector3Masked_()
  : mask()
  , mode()
  , values()
  {
  }

  Vector3Masked_(const ContainerAllocator& _alloc)
  : mask(_alloc)
  , mode(_alloc)
  , values(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _mask_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  mask;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _mode_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  mode;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _values_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  values;


private:
  static const char* __s_getDataType_() { return "seabee3_msgs/Vector3Masked"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "b14f0eeff8b4ac7d2f898ca7d64021af"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "geometry_msgs/Vector3 mask\n\
geometry_msgs/Vector3 mode\n\
geometry_msgs/Vector3 values\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, mask);
    ros::serialization::serialize(stream, mode);
    ros::serialization::serialize(stream, values);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, mask);
    ros::serialization::deserialize(stream, mode);
    ros::serialization::deserialize(stream, values);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(mask);
    size += ros::serialization::serializationLength(mode);
    size += ros::serialization::serializationLength(values);
    return size;
  }

  typedef boost::shared_ptr< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seabee3_msgs::Vector3Masked_<ContainerAllocator>  const> ConstPtr;
}; // struct Vector3Masked
typedef  ::seabee3_msgs::Vector3Masked_<std::allocator<void> > Vector3Masked;

typedef boost::shared_ptr< ::seabee3_msgs::Vector3Masked> Vector3MaskedPtr;
typedef boost::shared_ptr< ::seabee3_msgs::Vector3Masked const> Vector3MaskedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::seabee3_msgs::Vector3Masked_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace seabee3_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b14f0eeff8b4ac7d2f898ca7d64021af";
  }

  static const char* value(const  ::seabee3_msgs::Vector3Masked_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb14f0eeff8b4ac7dULL;
  static const uint64_t static_value2 = 0x2f898ca7d64021afULL;
};

template<class ContainerAllocator>
struct DataType< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/Vector3Masked";
  }

  static const char* value(const  ::seabee3_msgs::Vector3Masked_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 mask\n\
geometry_msgs/Vector3 mode\n\
geometry_msgs/Vector3 values\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::seabee3_msgs::Vector3Masked_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mask);
    stream.next(m.mode);
    stream.next(m.values);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Vector3Masked_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::seabee3_msgs::Vector3Masked_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::seabee3_msgs::Vector3Masked_<ContainerAllocator> & v) 
  {
    s << indent << "mask: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.mask);
    s << indent << "mode: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "values: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.values);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SEABEE3_MSGS_MESSAGE_VECTOR3MASKED_H

