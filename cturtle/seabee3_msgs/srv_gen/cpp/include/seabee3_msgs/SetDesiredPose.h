/* Auto-generated by genmsg_cpp for file /home/edward/workspace/seabee3-ros-pkg/seabee3_msgs/srv/SetDesiredPose.srv */
#ifndef SEABEE3_MSGS_SERVICE_SETDESIREDPOSE_H
#define SEABEE3_MSGS_SERVICE_SETDESIREDPOSE_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "ros/service_traits.h"

#include "seabee3_msgs/Vector3Masked.h"
#include "seabee3_msgs/Vector3Masked.h"



namespace seabee3_msgs
{
template <class ContainerAllocator>
struct SetDesiredPoseRequest_ : public ros::Message
{
  typedef SetDesiredPoseRequest_<ContainerAllocator> Type;

  SetDesiredPoseRequest_()
  : pos()
  , ori()
  {
  }

  SetDesiredPoseRequest_(const ContainerAllocator& _alloc)
  : pos(_alloc)
  , ori(_alloc)
  {
  }

  typedef  ::seabee3_msgs::Vector3Masked_<ContainerAllocator>  _pos_type;
   ::seabee3_msgs::Vector3Masked_<ContainerAllocator>  pos;

  typedef  ::seabee3_msgs::Vector3Masked_<ContainerAllocator>  _ori_type;
   ::seabee3_msgs::Vector3Masked_<ContainerAllocator>  ori;


private:
  static const char* __s_getDataType_() { return "seabee3_msgs/SetDesiredPoseRequest"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "4ceeb5c5a4666b53df90ee0a681e0ac8"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "4ceeb5c5a4666b53df90ee0a681e0ac8"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "seabee3_msgs/Vector3Masked pos\n\
seabee3_msgs/Vector3Masked ori\n\
\n\
================================================================================\n\
MSG: seabee3_msgs/Vector3Masked\n\
geometry_msgs/Vector3 mask\n\
geometry_msgs/Vector3 mode\n\
geometry_msgs/Vector3 values\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, pos);
    ros::serialization::serialize(stream, ori);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, pos);
    ros::serialization::deserialize(stream, ori);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(pos);
    size += ros::serialization::serializationLength(ori);
    return size;
  }

  typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetDesiredPoseRequest
typedef  ::seabee3_msgs::SetDesiredPoseRequest_<std::allocator<void> > SetDesiredPoseRequest;

typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseRequest> SetDesiredPoseRequestPtr;
typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseRequest const> SetDesiredPoseRequestConstPtr;


template <class ContainerAllocator>
struct SetDesiredPoseResponse_ : public ros::Message
{
  typedef SetDesiredPoseResponse_<ContainerAllocator> Type;

  SetDesiredPoseResponse_()
  {
  }

  SetDesiredPoseResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "seabee3_msgs/SetDesiredPoseResponse"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROSCPP_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "4ceeb5c5a4666b53df90ee0a681e0ac8"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROSCPP_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
\n\
"; }
public:
  ROSCPP_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROSCPP_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROSCPP_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetDesiredPoseResponse
typedef  ::seabee3_msgs::SetDesiredPoseResponse_<std::allocator<void> > SetDesiredPoseResponse;

typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseResponse> SetDesiredPoseResponsePtr;
typedef boost::shared_ptr< ::seabee3_msgs::SetDesiredPoseResponse const> SetDesiredPoseResponseConstPtr;

struct SetDesiredPose
{

typedef SetDesiredPoseRequest Request;
typedef SetDesiredPoseResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetDesiredPose
} // namespace seabee3_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ceeb5c5a4666b53df90ee0a681e0ac8";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4ceeb5c5a4666b53ULL;
  static const uint64_t static_value2 = 0xdf90ee0a681e0ac8ULL;
};

template<class ContainerAllocator>
struct DataType< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/SetDesiredPoseRequest";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/Vector3Masked pos\n\
seabee3_msgs/Vector3Masked ori\n\
\n\
================================================================================\n\
MSG: seabee3_msgs/Vector3Masked\n\
geometry_msgs/Vector3 mask\n\
geometry_msgs/Vector3 mode\n\
geometry_msgs/Vector3 values\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/SetDesiredPoseResponse";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pos);
    stream.next(m.ori);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetDesiredPoseRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetDesiredPoseResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<seabee3_msgs::SetDesiredPose> {
  static const char* value() 
  {
    return "4ceeb5c5a4666b53df90ee0a681e0ac8";
  }

  static const char* value(const seabee3_msgs::SetDesiredPose&) { return value(); } 
};

template<>
struct DataType<seabee3_msgs::SetDesiredPose> {
  static const char* value() 
  {
    return "seabee3_msgs/SetDesiredPose";
  }

  static const char* value(const seabee3_msgs::SetDesiredPose&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ceeb5c5a4666b53df90ee0a681e0ac8";
  }

  static const char* value(const seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/SetDesiredPose";
  }

  static const char* value(const seabee3_msgs::SetDesiredPoseRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4ceeb5c5a4666b53df90ee0a681e0ac8";
  }

  static const char* value(const seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "seabee3_msgs/SetDesiredPose";
  }

  static const char* value(const seabee3_msgs::SetDesiredPoseResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SEABEE3_MSGS_SERVICE_SETDESIREDPOSE_H

