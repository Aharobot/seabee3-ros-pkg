#! /usr/bin/env python

PACKAGE='color_blob_finder'
import roslib; roslib.load_manifest(PACKAGE)

from math import pi

from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()
#Name            Type   Reconfiguration level             Description         Default Min Max

gen.add( "threshold_value", double_t, SensorLevels.RECONFIGURE_RUNNING, "threshold value", 200.0, 0.0, 255.0 )
gen.add( "threshold_max_value", double_t, SensorLevels.RECONFIGURE_RUNNING, "threshold_max_value", 255.0, 0.0, 255.0 )

threshold_types = gen.enum([gen.const("binary",     int_t, 0, "Binary Threshold"),
                            gen.const("binary_inv", int_t, 1, "Inverted Binary Threshold"),
                            gen.const("trunc",      int_t, 2, "Truncate"),
                            gen.const("tozero",     int_t, 3, "Threshold to zero if too high"),
                            gen.const("tozero_inv", int_t, 4, "Threshold to zero if too low")],
                           "Threshold Types")

gen.add("threshold_type", int_t, SensorLevels.RECONFIGURE_CLOSE,
        "type of thresholding operation", 1, 0, 4,
        edit_method = threshold_types)
        
gen.add("draw_distance_image", bool_t, SensorLevels.RECONFIGURE_RUNNING, "whether to draw the distance image in the background", False )

exit(gen.generate(PACKAGE, "dynamic_reconfigure_node", "ColorBlobFinder"))

